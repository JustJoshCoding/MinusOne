{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\816001354\\\\OneDrive\\\\Desktop\\\\MinusOne\\\\src\\\\ProManageContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport axios from \"axios\";\nimport { onSnapshot, doc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProManage = /*#__PURE__*/createContext(); // the context for the entire application\n\nconst ProManageContext = ({\n  children\n}) => {\n  _s();\n\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\"\n  });\n  const [user, setUser] = useState(null);\n  const [availIdeas, setAvailIdeas] = useState([]);\n  const [, setCoins] = useState([]); // setting the user state to the user that is currently logged in\n\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) setUser(user);else setUser(null);\n    });\n  }, []); // saving the new ideas from the available ideas add form to the firestore database\n\n  useEffect(() => {\n    if (user) {\n      const ideaRef = doc(db, \"available ideas\", user === null || user === void 0 ? void 0 : user.uid);\n      var unsubscribe = onSnapshot(ideaRef, idea => {\n        if (idea.exists()) {\n          console.log(idea.data().availIdeas);\n          setAvailIdeas(idea.data().availIdeas);\n        } else {\n          console.log(\"No Available Ideas, Please check back later\");\n        }\n      });\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(ProManage.Provider, {\n    value: {\n      alert,\n      setAlert,\n      user,\n      availIdeas\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProManageContext, \"OrmCPluR3kLChwWhZu5IgSUgKf8=\");\n\n_c = ProManageContext;\nexport default ProManageContext;\nexport const ProManageState = () => {\n  _s2();\n\n  return useContext(ProManage);\n};\n\n_s2(ProManageState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = ProManageState;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProManageContext\");\n$RefreshReg$(_c2, \"ProManageState\");","map":{"version":3,"sources":["C:/Users/816001354/OneDrive/Desktop/MinusOne/src/ProManageContext.js"],"names":["createContext","useContext","useEffect","useState","onAuthStateChanged","auth","db","axios","onSnapshot","doc","ProManage","ProManageContext","children","alert","setAlert","open","message","type","user","setUser","availIdeas","setAvailIdeas","setCoins","ideaRef","uid","unsubscribe","idea","exists","console","log","data","ProManageState"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;;AAEA,MAAMC,SAAS,gBAAGV,aAAa,EAA/B,C,CAEA;;AACA,MAAMW,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AACjCY,IAAAA,IAAI,EAAE,KAD2B;AAEjCC,IAAAA,OAAO,EAAE,EAFwB;AAGjCC,IAAAA,IAAI,EAAE;AAH2B,GAAD,CAAlC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,GAAGmB,QAAH,IAAenB,QAAQ,CAAC,EAAD,CAA7B,CATyC,CAWzC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,kBAAkB,CAACC,IAAD,EAAQa,IAAD,IAAU;AACjC,UAAIA,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP,CAAV,KACKC,OAAO,CAAC,IAAD,CAAP;AACN,KAHiB,CAAlB;AAID,GALQ,EAKN,EALM,CAAT,CAZyC,CAmBzC;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAJ,EAAU;AACR,YAAMK,OAAO,GAAGd,GAAG,CAACH,EAAD,EAAK,iBAAL,EAAwBY,IAAxB,aAAwBA,IAAxB,uBAAwBA,IAAI,CAAEM,GAA9B,CAAnB;AACA,UAAIC,WAAW,GAAGjB,UAAU,CAACe,OAAD,EAAWG,IAAD,IAAU;AAC9C,YAAIA,IAAI,CAACC,MAAL,EAAJ,EAAmB;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAL,GAAYV,UAAxB;AACAC,UAAAA,aAAa,CAACK,IAAI,CAACI,IAAL,GAAYV,UAAb,CAAb;AACD,SAHD,MAIK;AACHQ,UAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF,OAR2B,CAA5B;AAUA,aAAO,MAAM;AACXJ,QAAAA,WAAW;AACZ,OAFD;AAGD;AACF,GAjBQ,EAiBN,CAACP,IAAD,CAjBM,CAAT;AAmBA,sBACE,QAAC,SAAD,CAAW,QAAX;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,KADK;AAELC,MAAAA,QAFK;AAGLI,MAAAA,IAHK;AAILE,MAAAA;AAJK,KADT;AAAA,cAQGR;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAnDD;;GAAMD,gB;;KAAAA,gB;AAqDN,eAAeA,gBAAf;AAEA,OAAO,MAAMoB,cAAc,GAAG,MAAM;AAAA;;AAClC,SAAO9B,UAAU,CAACS,SAAD,CAAjB;AACD,CAFM;;IAAMqB,c;;MAAAA,c","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport axios from \"axios\";\nimport { onSnapshot, doc } from \"firebase/firestore\";\n\nconst ProManage = createContext();\n\n// the context for the entire application\nconst ProManageContext = ({ children }) => {\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\",\n  });\n\n  const [user, setUser] = useState(null);\n  const [availIdeas, setAvailIdeas] = useState([]);\n  const [, setCoins] = useState([]);\n\n  // setting the user state to the user that is currently logged in\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) setUser(user);\n      else setUser(null);\n    });\n  }, []);\n\n  // saving the new ideas from the available ideas add form to the firestore database\n  useEffect(() => {\n    if (user) {\n      const ideaRef = doc(db, \"available ideas\", user?.uid);\n      var unsubscribe = onSnapshot(ideaRef, (idea) => {\n        if (idea.exists()) {\n          console.log(idea.data().availIdeas);\n          setAvailIdeas(idea.data().availIdeas);\n        } \n        else {\n          console.log(\"No Available Ideas, Please check back later\");\n        }\n      });\n\n      return () => {\n        unsubscribe();\n      };\n    }\n  }, [user]);\n\n  return (\n    <ProManage.Provider\n      value={{\n        alert,\n        setAlert,\n        user,\n        availIdeas\n      }}\n    >\n      {children}\n    </ProManage.Provider>\n  );\n};\n\nexport default ProManageContext;\n\nexport const ProManageState = () => {\n  return useContext(ProManage);\n};\n"]},"metadata":{},"sourceType":"module"}