{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\816001354\\\\OneDrive\\\\Desktop\\\\MinusOne\\\\src\\\\ProManageContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport { getDocs, collection } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProManage = /*#__PURE__*/createContext(); // the context for the entire application\n\nconst ProManageContext = ({\n  children\n}) => {\n  _s();\n\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\"\n  });\n  const [user, setUser] = useState(null);\n  const [availIdeas, setAvailIdeas] = useState([]); // setting the user state to the user that is currently logged in\n\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) setUser(user);else setUser(null);\n    });\n  }, []); // saving the new ideas from the available ideas add form to the firestore database\n\n  useEffect(() => {\n    const ideaRef = collection(db, \"Ideas\");\n\n    if (user) {\n      const getAvailIdeas = async () => {\n        const data = await getDocs(ideaRef);\n\n        if (data) {\n          setAvailIdeas(data.docs.map(doc => ({ ...doc.data(),\n            id: doc.id\n          })));\n        } else {\n          console.log(\"No Available Ideas, Please check back later\");\n        }\n      };\n\n      getAvailIdeas();\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(ProManage.Provider, {\n    value: {\n      alert,\n      setAlert,\n      user,\n      availIdeas\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProManageContext, \"CjAPEMiQ5ns+B5FFJ4W96Fs1dUg=\");\n\n_c = ProManageContext;\nexport default ProManageContext;\nexport const ProManageState = () => {\n  _s2();\n\n  return useContext(ProManage);\n};\n\n_s2(ProManageState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = ProManageState;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProManageContext\");\n$RefreshReg$(_c2, \"ProManageState\");","map":{"version":3,"sources":["C:/Users/816001354/OneDrive/Desktop/MinusOne/src/ProManageContext.js"],"names":["createContext","useContext","useEffect","useState","onAuthStateChanged","auth","db","getDocs","collection","ProManage","ProManageContext","children","alert","setAlert","open","message","type","user","setUser","availIdeas","setAvailIdeas","ideaRef","getAvailIdeas","data","docs","map","doc","id","console","log","ProManageState"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,YAAzB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,oBAApC;;AAEA,MAAMC,SAAS,gBAAGT,aAAa,EAA/B,C,CAEA;;AACA,MAAMU,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AACjCW,IAAAA,IAAI,EAAE,KAD2B;AAEjCC,IAAAA,OAAO,EAAE,EAFwB;AAGjCC,IAAAA,IAAI,EAAE;AAH2B,GAAD,CAAlC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C,CARyC,CAUzC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,kBAAkB,CAACC,IAAD,EAAQY,IAAD,IAAU;AACjC,UAAIA,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP,CAAV,KACKC,OAAO,CAAC,IAAD,CAAP;AACN,KAHiB,CAAlB;AAID,GALQ,EAKN,EALM,CAAT,CAXyC,CAkBzC;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,OAAO,GAAGb,UAAU,CAACF,EAAD,EAAK,OAAL,CAA1B;;AACA,QAAIW,IAAJ,EAAU;AACR,YAAMK,aAAa,GAAG,YAAa;AACjC,cAAMC,IAAI,GAAG,MAAMhB,OAAO,CAACc,OAAD,CAA1B;;AACA,YAAIE,IAAJ,EAAU;AACRH,UAAAA,aAAa,CAACG,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAeC,GAAD,KAAU,EAAE,GAAGA,GAAG,CAACH,IAAJ,EAAL;AAAiBI,YAAAA,EAAE,EAAED,GAAG,CAACC;AAAzB,WAAV,CAAd,CAAD,CAAb;AACD,SAFD,MAGK;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF,OARD;;AASAP,MAAAA,aAAa;AACd;AACF,GAdQ,EAcN,CAACL,IAAD,CAdM,CAAT;AAgBA,sBACE,QAAC,SAAD,CAAW,QAAX;AACE,IAAA,KAAK,EAAE;AACLL,MAAAA,KADK;AAELC,MAAAA,QAFK;AAGLI,MAAAA,IAHK;AAILE,MAAAA;AAJK,KADT;AAAA,cAQGR;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA/CD;;GAAMD,gB;;KAAAA,gB;AAiDN,eAAeA,gBAAf;AAEA,OAAO,MAAMoB,cAAc,GAAG,MAAM;AAAA;;AAClC,SAAO7B,UAAU,CAACQ,SAAD,CAAjB;AACD,CAFM;;IAAMqB,c;;MAAAA,c","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport { getDocs, collection } from \"firebase/firestore\";\n\nconst ProManage = createContext();\n\n// the context for the entire application\nconst ProManageContext = ({ children }) => {\n  const [alert, setAlert] = useState({\n    open: false,\n    message: \"\",\n    type: \"success\",\n  });\n\n  const [user, setUser] = useState(null);\n  const [availIdeas, setAvailIdeas] = useState([])\n\n  // setting the user state to the user that is currently logged in\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) setUser(user);\n      else setUser(null);\n    });\n  }, []);\n\n  // saving the new ideas from the available ideas add form to the firestore database\n  useEffect(() => {\n    const ideaRef = collection(db, \"Ideas\");\n    if (user) {\n      const getAvailIdeas = async  () => {\n        const data = await getDocs(ideaRef);\n        if (data) {\n          setAvailIdeas(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n        }\n        else {\n          console.log(\"No Available Ideas, Please check back later\");\n        }\n      };\n      getAvailIdeas()\n    }\n  }, [user]);\n\n  return (\n    <ProManage.Provider\n      value={{\n        alert,\n        setAlert,\n        user,\n        availIdeas,\n      }}\n    >\n      {children}\n    </ProManage.Provider>\n  );\n};\n\nexport default ProManageContext;\n\nexport const ProManageState = () => {\n  return useContext(ProManage);\n};\n"]},"metadata":{},"sourceType":"module"}